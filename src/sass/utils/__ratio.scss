/* Global, sort of reset
-------------------------------------- */
body {
  padding: 1em;
}

* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}





/* Mixins
-------------------------------------- */
// Clearfix
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
  // For IE 6/7 (trigger hasLayout)s
  zoom: 1;
}

// Breakpoints
@mixin bp-at-least($device-width) {
  @media screen and (min-width: $device-width) {
    @content
  }
}





/* Grids
--------------------------------------- */
// Vars
$grid__padding: .5em;
$grid__float-at: (480/16)*1em; // 480px / 30em

// Grid Wrap
.grid-wrap,
.gw {
  padding-bottom: $grid__padding*2;
  @include clearfix();
  // Sometimes, ul are used for grid wraps
  list-style-type: none;
  @include bp-at-least($grid__float-at){
    margin: 0 -1*$grid__padding;
  }
}

// Grid
.grid,
.g {
  @include clearfix();
  min-height: 1em;
  position: relative;
  display: block;
  padding-bottom: 2*$grid__padding;
  @include bp-at-least($grid__float-at){
    padding: 0 $grid__padding 2*$grid__padding;
    float: left;
  }
  > * {
    padding: 3em 0;
    text-align: center;
    color: #333;
  }
}

// Grids
.grids {
  .g * {
    background: #a2bb60;
    color: rgba(0, 0, 0, .25);
  }
  &:nth-of-type(2) .g * {
    background: #94c1c8;
  }
  &:nth-of-type(3) .g * {
    background: #c9b18b;
  }
  &:nth-of-type(4) .g * {
    background: #c492bc;
  }
}



/* Ratio
-----------------------------------------

  Ratio types:

  Quadrat (or Square/Even)  1:1
  Hemidiagon  1:1.118
  Trion 1:1.154
  Quadriagon  1:1.207
  Biauron 1:1.236
  Penton  1:1.272
  Diagon  1:1.414
  Bipenton  1:1.458
  Hemiolion 1:1.5
  Auron (the golden ratio)  1:1.618
  Hecton (or Sixton)  1:1.732

  We're going to use Auron

----------------------------------------- */

$ratios: (
  quadrat: 1,
  hemidiagon: 1.118,
  trion: 1.154,
  quadriagon: 1.207,
  biauron: 1.236,
  penton: 1.272,
  diagon: 1.414,
  bipenton: 1.458,
  hemiolion: 1.5,
  auron: 1.618,
  hecton: 1.732
 );

@mixin ratio-row($ratio, $cols){

  /*
     Row with #{$cols} columns
  ------------------------------------------ */

 $ratio-name: $ratio; // ratio name
 $ratio: map-get($ratios, $ratio);

 // Define first value in cols map
 $colsmap: (
  1: 1
 );

 // Start the total value of all cols
 $cols-total: 1;

 // Add values for each col to $colsmap
 @for $i from 2 through $cols {
   // value of this col is the prev * ratio
  $new-col-val: map-get($colsmap, $i - 1)*$ratio;
  $colsmap: map-merge($colsmap, ($i: $new-col-val));
  $cols-total: $cols-total + $new-col-val;
 }

 // return widths for each column
 @each $col, $value in $colsmap {
   .g--#{$ratio-name}-#{$col}-of-#{$cols} {
      width: ($value/$cols-total)*100%;
    }
 }


} // ratio-row


@mixin ratio-grid($ratio, $cols) {
  /*
    #{$ratio} grid
    Ratio grid using #{$ratio} and a max of #{$cols} cols
  ------------------------------------------ */
  @for $i from 2 through $cols {
    @include ratio-row($ratio, $i);
  }

} // ratio-grid


// Create a ratio grid
@include bp-at-least($grid__float-at){
  @include ratio-grid(auron, 5);
}
